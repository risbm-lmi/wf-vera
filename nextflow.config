params {
    // input and output params
    input = null
    outdir = null
    
    // paths to complete fastas with host or contaminant
    // if several contaminants/hosts, join all of them into single fasta respectively 
    host_index = ""
    host_fasta = ""
    contam_fasta = ""

    kraken2_db = ""
    viral_db_kraken2 = ""
    mmseqs_easy_taxonomy_protein_db = ""
    mmseqs_easy_taxonomy_refseq_viral_db = ""

    // режим для переноса данных
    publish_dir_mode = 'copy'

    // side software additional params
    // FASTP
    fastp_discard_trimmed_fail = false
    fastp_save_trimmed_fail = false
    fastp_save_merged = false
    
    // run params
    fastp_qualified_quality = 15
    fastp_cut_mean_quality = 15
    fastp_reads_minlength = 15
    fastp_trim_front1 = null
    fastp_trim_front2 = null
    // true to save clipped reads to output
    save_clipped_reads = false

    // kraken2 params
    do_kraken2 = false
    kraken2_save_output_fastqc = false
    kraken2_save_reads_assignment = false

    // cat reads params
    save_clean_merged_reads = false

    // spades params
    spades_hmm_path = null
    // обычный (null), или rna, или viral, или metaviral
    spades_mode = null

    contig_len_filter = 200
    save_len_filtered_contigs = false

    min_orf_len = 50
    save_generated_orfs = false

    save_protein_filtered = false
    safe_sent_for_extension = true

    // mmseqs taxa tanks, comma separated
    mmseqs_lca_ranks = "superkingdom,order,family,genus"
    save_mmseqs_results = true
    save_mmseqs_protein_results = true

    hot_hit_size_match_cutoff = 0.8
    hot_hit_length_cutoff = 100
    query_coverage_cutoff = 0.5
    mmseqs_max_seq_len = 1000000

}

// clean working dir if complete successfully
cleanup = false

profiles {
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// max number of simultaneous jobs per process
executor {
    queueSize       = 8
    submitRateLimit = '5 sec'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

includeConfig 'conf/modules.config'
