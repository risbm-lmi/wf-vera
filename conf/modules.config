process {
    withName: FASTQC_RAW {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/quality_control/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_${meta.run}_raw" }
        tag = { "${meta.id}_${meta.run}" }
    }

    withName: KRAKEN2_RAW {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/taxonomy/kraken2/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
        ext.prefix = { "${meta.id}_${meta.run}_raw" }
        tag = { "${meta.id}_${meta.run}" }
    }

    withName: BOWTIE2_HOST_ALIGN {
        publishDir =[
                path: { "${params.outdir}/quality_control/removal_host" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
        ]
        ext.prefix = { "${meta.id}_${meta.run}_removal_host" }
        tag = { "${meta.id}_${meta.run}" }
    }

    withName: BOWTIE2_CONTAM_ALIGN {
        publishDir =[
                path: { "${params.outdir}/quality_control/removal_contam" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
        ]
        ext.prefix = { "${meta.id}_${meta.run}_removal_contam" }
        tag = { "${meta.id}_${meta.run}" }
    }

    withName: FASTP {
        ext.args = [
            "-q ${params.fastp_qualified_quality}",
            "--cut_front",
            "--cut_tail",
            "--cut_mean_quality ${params.fastp_cut_mean_quality}",
            "--length_required ${params.fastp_reads_minlength}",
            "--dedup",
            "--trim_poly_x",
            params.fastp_trim_front1 ? "--trim_front1 ${params.fastp_trim_front1}" : "",
            params.fastp_trim_front2 ? "--trim_front2 ${params.fastp_trim_front2}" : "",
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/quality_control/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}"
            ],
            [
                path: { "${params.outdir}/quality_control/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_clipped_reads
            ]
        ]
        ext.prefix = { "${meta.id}_${meta.run}_fastp" }
        tag = { "${meta.id}_${meta.run}" }
    }

    withName: FASTQC_TRIMMED {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/quality_control/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_${meta.run}_trimmed" }
        tag = { "${meta.id}_${meta.run}" }
    }

    withName: CAT_FASTQ {
        publishDir =[
                path: { "${params.outdir}/quality_control/result_reads" },
                mode: params.publish_dir_mode,
                pattern: "*.merged.fastq.gz",
                enabled: params.save_clean_merged_reads
        ]
    }

    withName: KRAKEN2_CLEAN {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/taxonomy/kraken2/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
        ext.prefix = { "${meta.id}_clean" }
    }

    withName: 'SPADES' {
        ext.args = params.spades_mode ? "--${params.spades_mode}" : ''
        publishDir = [
            [
                path: { "${params.outdir}/assembly/spades_${params.spades_mode}" },
                mode: params.publish_dir_mode,
                pattern: '*.{fa.gz,gfa.gz}'
            ],
            [
                path: { "${params.outdir}/assembly/spades_${params.spades_mode}/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: SEQKIT_SEQ {
        ext.args = "-m ${params.contig_len_filter}"
        publishDir = [
            path: { "${params.outdir}/assembly/contigs_processing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fa.gz",
            enabled: params.save_len_filtered_contigs
        ]
        ext.prefix = { "${meta.id}_length_filtered" }
    }

    withName: SEQKIT_TRANSLATE {
        ext.args = ["-x", 
                    "-F",
                    "-m ${params.min_orf_len}", 
                    "-s"].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/assembly/contigs_processing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fa.gz",
            enabled: params.save_generated_orfs
        ]
        ext.prefix = { "${meta.id}_generated_orfs" }
    }

    withName: MMSEQS_PROTEINS {
        ext.args = [
            "--lca-ranks ${params.mmseqs_lca_ranks}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/taxonomy/mmseqs_protein/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*_{lca.tsv,report,tophit_aln,tophit_report}",
            enabled: params.save_mmseqs_protein_results
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: PARSE_MMSEQS_PROTEIN_RESULTS {
        publishDir = [
            path: { "${params.outdir}/taxonomy/mmseqs_protein/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*_selected.tsv"
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: SEQKIT_GREP_FOR_NUCL {
        publishDir = [
            path: { "${params.outdir}/pivot/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fa.gz",
            enabled: params.save_protein_filtered
        ]
        ext.prefix = { "${meta.id}_protein_filtered" }
    }

    withName: MMSEQS_NUCLEOTIDES {
        ext.args = [
            "--search-type 3",
            "--lca-ranks ${params.mmseqs_lca_ranks}",
            "--format-mode 4",
            "--format-output query,target,qlen,tlen,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits",
            "--max-seq-len ${params.mmseqs_max_seq_len}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/taxonomy/mmseqs_nucleotide/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*_{lca.tsv,report,tophit_aln,tophit_report}",
            enabled: params.save_mmseqs_results
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: PARSE_MMSEQS_NUCLEOTIDE_RESULTS {
        ext.args = [
            "-hot_hit_size_match_cutoff ${params.hot_hit_size_match_cutoff}",
            "-hot_hit_length_cutoff ${params.hot_hit_length_cutoff}",
            "-query_coverage_cutoff ${params.query_coverage_cutoff}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/taxonomy/mmseqs_nucleotide/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*_filtered_taxa.tsv"
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: BOWTIE2_CONTIGS_ALIGN {
        ext.prefix = { "${meta.id}" }
        publishDir =[
                path: { "${params.outdir}/align/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,log}"
        ]
    }

    withName: SAMTOOLS_COVERAGE {
        ext.prefix = { "${meta.id}" }
        publishDir =[
                path: { "${params.outdir}/align/" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
        ]
    }

    withName: SEQKIT_GREP_FOR_EXTENSION {
        publishDir = [
            path: { "${params.outdir}/pivot/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fa.gz",
            enabled: params.safe_sent_for_extension
        ]
        ext.prefix = { "${meta.id}_selected_for_extension" }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: CREATE_EXTENDED_TABLE {
        publishDir = [
            path: { "${params.outdir}/pivot/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*_extended_table.tsv"
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'MULTIQC' {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
